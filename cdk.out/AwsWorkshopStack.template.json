{
 "Resources": {
  "GetDataLambdaServiceRole2E324F5A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/GetDataLambda/ServiceRole/Resource"
   }
  },
  "GetDataLambdaServiceRoleDefaultPolicyAEC403EF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "RawBucket0C3EE094",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "RawBucket0C3EE094",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "GetDataLambdaServiceRoleDefaultPolicyAEC403EF",
    "Roles": [
     {
      "Ref": "GetDataLambdaServiceRole2E324F5A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/GetDataLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "GetDataLambda50AD8F20": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434.zip"
    },
    "Handler": "get_data.handler",
    "Role": {
     "Fn::GetAtt": [
      "GetDataLambdaServiceRole2E324F5A",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 10
   },
   "DependsOn": [
    "GetDataLambdaServiceRoleDefaultPolicyAEC403EF",
    "GetDataLambdaServiceRole2E324F5A"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/GetDataLambda/Resource",
    "aws:asset:path": "asset.533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "RawBucket0C3EE094": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::AccountId"
       },
       "-raw-bucket"
      ]
     ]
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/RawBucket/Resource"
   }
  },
  "RawBucketNotificationsAC3090B1": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "RawBucket0C3EE094"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "EnqueueRawDataLambdaEBF549F0",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "RawBucketAllowBucketNotificationsToAwsWorkshopStackEnqueueRawDataLambda798119F444D2319A"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/RawBucket/Notifications/Resource"
   }
  },
  "RawBucketAllowBucketNotificationsToAwsWorkshopStackEnqueueRawDataLambda798119F444D2319A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "EnqueueRawDataLambdaEBF549F0",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "RawBucket0C3EE094",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/RawBucket/AllowBucketNotificationsToAwsWorkshopStackEnqueueRawDataLambda798119F4"
   }
  },
  "EnqueueRawDataLambdaServiceRoleA7B0927E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/EnqueueRawDataLambda/ServiceRole/Resource"
   }
  },
  "EnqueueRawDataLambdaServiceRoleDefaultPolicy55B527D0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "RawBucket0C3EE094",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "RawBucket0C3EE094",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "RawQueueD6EB3021",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EnqueueRawDataLambdaServiceRoleDefaultPolicy55B527D0",
    "Roles": [
     {
      "Ref": "EnqueueRawDataLambdaServiceRoleA7B0927E"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/EnqueueRawDataLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "EnqueueRawDataLambdaEBF549F0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434.zip"
    },
    "Handler": "raw_queue.handler",
    "Role": {
     "Fn::GetAtt": [
      "EnqueueRawDataLambdaServiceRoleA7B0927E",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 5
   },
   "DependsOn": [
    "EnqueueRawDataLambdaServiceRoleDefaultPolicy55B527D0",
    "EnqueueRawDataLambdaServiceRoleA7B0927E"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/EnqueueRawDataLambda/Resource",
    "aws:asset:path": "asset.533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "RawQueueD6EB3021": {
   "Type": "AWS::SQS::Queue",
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/RawQueue/Resource"
   }
  },
  "ProcessedQueue71DCB182": {
   "Type": "AWS::SQS::Queue",
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/ProcessedQueue/Resource"
   }
  },
  "ProcessRawQueueLambdaServiceRoleE87B7466": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/ProcessRawQueueLambda/ServiceRole/Resource"
   }
  },
  "ProcessRawQueueLambdaServiceRoleDefaultPolicyABA78E81": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "RawQueueD6EB3021",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ProcessedQueue71DCB182",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessRawQueueLambdaServiceRoleDefaultPolicyABA78E81",
    "Roles": [
     {
      "Ref": "ProcessRawQueueLambdaServiceRoleE87B7466"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/ProcessRawQueueLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ProcessRawQueueLambda19518C11": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434.zip"
    },
    "Environment": {
     "Variables": {
      "PROCESSED_URL": {
       "Ref": "ProcessedQueue71DCB182"
      }
     }
    },
    "Handler": "process_raw_queue.handler",
    "Role": {
     "Fn::GetAtt": [
      "ProcessRawQueueLambdaServiceRoleE87B7466",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 10
   },
   "DependsOn": [
    "ProcessRawQueueLambdaServiceRoleDefaultPolicyABA78E81",
    "ProcessRawQueueLambdaServiceRoleE87B7466"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/ProcessRawQueueLambda/Resource",
    "aws:asset:path": "asset.533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ProcessRawQueueLambdaSqsEventSourceAwsWorkshopStackRawQueueDE42E5D2C26EBFEF": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "EventSourceArn": {
     "Fn::GetAtt": [
      "RawQueueD6EB3021",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "ProcessRawQueueLambda19518C11"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/ProcessRawQueueLambda/SqsEventSource:AwsWorkshopStackRawQueueDE42E5D2/Resource"
   }
  },
  "ProcessedBucketDE59930C": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::AccountId"
       },
       "-processed-bucket"
      ]
     ]
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/ProcessedBucket/Resource"
   }
  },
  "LoadLambdaServiceRole647CEF96": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/LoadLambda/ServiceRole/Resource"
   }
  },
  "LoadLambdaServiceRoleDefaultPolicyFB92459D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ProcessedQueue71DCB182",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessedBucketDE59930C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessedBucketDE59930C",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LoadLambdaServiceRoleDefaultPolicyFB92459D",
    "Roles": [
     {
      "Ref": "LoadLambdaServiceRole647CEF96"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/LoadLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LoadLambda2B5EB8E4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434.zip"
    },
    "Environment": {
     "Variables": {
      "BUCKET_NAME": {
       "Ref": "ProcessedBucketDE59930C"
      }
     }
    },
    "Handler": "load.handler",
    "Role": {
     "Fn::GetAtt": [
      "LoadLambdaServiceRole647CEF96",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 10
   },
   "DependsOn": [
    "LoadLambdaServiceRoleDefaultPolicyFB92459D",
    "LoadLambdaServiceRole647CEF96"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/LoadLambda/Resource",
    "aws:asset:path": "asset.533771b8e794370ffd4e38e79a1eae4672ce3026260d33b1b77ec4680720d434",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LoadLambdaSqsEventSourceAwsWorkshopStackProcessedQueue73227245BCBB44DF": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "EventSourceArn": {
     "Fn::GetAtt": [
      "ProcessedQueue71DCB182",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "LoadLambda2B5EB8E4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/LoadLambda/SqsEventSource:AwsWorkshopStackProcessedQueue73227245/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2WPz07DMAzGn2V3z1B62JlVcJtU2geYvNQbpm0y6oRpivLuKClCSJy+n/99tp+wqip83NBNt2YYt5OcMPaezAh002OcaD4NhPE1WOPFWWjO9i+3vMyimqOXL7a+d2ExfKDrVewlN/zPJhCaMXZu4txQtHWTmHsxLJRA6yOpsld8zgJaY9wHM7LfkzKsmAdWSqCfivEtcCiuBVKCjrXshuLSe7r83PVbaM62cXaQ/FGC9u7fnX2ocYe7zYeKbJdgvcyM3arf7tTrWDEBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "AwsWorkshopStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}